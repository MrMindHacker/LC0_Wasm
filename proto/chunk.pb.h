// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chunk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chunk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chunk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chunk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chunk_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chunk_2eproto;
namespace pblczero {
class Chunk;
class ChunkDefaultTypeInternal;
extern ChunkDefaultTypeInternal _Chunk_default_instance_;
class Game;
class GameDefaultTypeInternal;
extern GameDefaultTypeInternal _Game_default_instance_;
class Policy;
class PolicyDefaultTypeInternal;
extern PolicyDefaultTypeInternal _Policy_default_instance_;
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
}  // namespace pblczero
PROTOBUF_NAMESPACE_OPEN
template<> ::pblczero::Chunk* Arena::CreateMaybeMessage<::pblczero::Chunk>(Arena*);
template<> ::pblczero::Game* Arena::CreateMaybeMessage<::pblczero::Game>(Arena*);
template<> ::pblczero::Policy* Arena::CreateMaybeMessage<::pblczero::Policy>(Arena*);
template<> ::pblczero::State* Arena::CreateMaybeMessage<::pblczero::State>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pblczero {

enum Game_Result : int {
  Game_Result_WHITE = 0,
  Game_Result_BLACK = 1,
  Game_Result_DRAW = 2
};
bool Game_Result_IsValid(int value);
constexpr Game_Result Game_Result_Result_MIN = Game_Result_WHITE;
constexpr Game_Result Game_Result_Result_MAX = Game_Result_DRAW;
constexpr int Game_Result_Result_ARRAYSIZE = Game_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Game_Result_descriptor();
template<typename T>
inline const std::string& Game_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Game_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Game_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Game_Result_descriptor(), enum_t_value);
}
inline bool Game_Result_Parse(
    const std::string& name, Game_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Game_Result>(
    Game_Result_descriptor(), name, value);
}
// ===================================================================

class State :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pblczero.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(nullptr);
  }

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pblczero.State";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chunk_2eproto);
    return ::descriptor_table_chunk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaneFieldNumber = 1,
    kUsOooFieldNumber = 2,
    kUsOoFieldNumber = 3,
    kThemOooFieldNumber = 4,
    kThemOoFieldNumber = 5,
    kSideToMoveFieldNumber = 6,
    kRule50FieldNumber = 7,
  };
  // repeated fixed64 plane = 1 [packed = true];
  int plane_size() const;
  private:
  int _internal_plane_size() const;
  public:
  void clear_plane();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_plane(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_plane() const;
  void _internal_add_plane(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_plane();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 plane(int index) const;
  void set_plane(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_plane(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      plane() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_plane();

  // optional uint32 us_ooo = 2;
  bool has_us_ooo() const;
  private:
  bool _internal_has_us_ooo() const;
  public:
  void clear_us_ooo();
  ::PROTOBUF_NAMESPACE_ID::uint32 us_ooo() const;
  void set_us_ooo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_us_ooo() const;
  void _internal_set_us_ooo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 us_oo = 3;
  bool has_us_oo() const;
  private:
  bool _internal_has_us_oo() const;
  public:
  void clear_us_oo();
  ::PROTOBUF_NAMESPACE_ID::uint32 us_oo() const;
  void set_us_oo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_us_oo() const;
  void _internal_set_us_oo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 them_ooo = 4;
  bool has_them_ooo() const;
  private:
  bool _internal_has_them_ooo() const;
  public:
  void clear_them_ooo();
  ::PROTOBUF_NAMESPACE_ID::uint32 them_ooo() const;
  void set_them_ooo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_them_ooo() const;
  void _internal_set_them_ooo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 them_oo = 5;
  bool has_them_oo() const;
  private:
  bool _internal_has_them_oo() const;
  public:
  void clear_them_oo();
  ::PROTOBUF_NAMESPACE_ID::uint32 them_oo() const;
  void set_them_oo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_them_oo() const;
  void _internal_set_them_oo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 side_to_move = 6;
  bool has_side_to_move() const;
  private:
  bool _internal_has_side_to_move() const;
  public:
  void clear_side_to_move();
  ::PROTOBUF_NAMESPACE_ID::uint32 side_to_move() const;
  void set_side_to_move(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_side_to_move() const;
  void _internal_set_side_to_move(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rule_50 = 7;
  bool has_rule_50() const;
  private:
  bool _internal_has_rule_50() const;
  public:
  void clear_rule_50();
  ::PROTOBUF_NAMESPACE_ID::uint32 rule_50() const;
  void set_rule_50(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rule_50() const;
  void _internal_set_rule_50(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pblczero.State)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > plane_;
  mutable std::atomic<int> _plane_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 us_ooo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 us_oo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 them_ooo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 them_oo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 side_to_move_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rule_50_;
  friend struct ::TableStruct_chunk_2eproto;
};
// -------------------------------------------------------------------

class Policy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pblczero.Policy) */ {
 public:
  Policy();
  virtual ~Policy();

  Policy(const Policy& from);
  Policy(Policy&& from) noexcept
    : Policy() {
    *this = ::std::move(from);
  }

  inline Policy& operator=(const Policy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Policy& operator=(Policy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Policy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Policy* internal_default_instance() {
    return reinterpret_cast<const Policy*>(
               &_Policy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Policy& a, Policy& b) {
    a.Swap(&b);
  }
  inline void Swap(Policy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Policy* New() const final {
    return CreateMaybeMessage<Policy>(nullptr);
  }

  Policy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Policy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Policy& from);
  void MergeFrom(const Policy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Policy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pblczero.Policy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chunk_2eproto);
    return ::descriptor_table_chunk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kPriorFieldNumber = 2,
  };
  // repeated uint32 index = 1 [packed = true];
  int index_size() const;
  private:
  int _internal_index_size() const;
  public:
  void clear_index();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_index() const;
  void _internal_add_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_index();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 index(int index) const;
  void set_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_index();

  // repeated float prior = 2 [packed = true];
  int prior_size() const;
  private:
  int _internal_prior_size() const;
  public:
  void clear_prior();
  private:
  float _internal_prior(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_prior() const;
  void _internal_add_prior(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_prior();
  public:
  float prior(int index) const;
  void set_prior(int index, float value);
  void add_prior(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      prior() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_prior();

  // @@protoc_insertion_point(class_scope:pblczero.Policy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > index_;
  mutable std::atomic<int> _index_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > prior_;
  mutable std::atomic<int> _prior_cached_byte_size_;
  friend struct ::TableStruct_chunk_2eproto;
};
// -------------------------------------------------------------------

class Game :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pblczero.Game) */ {
 public:
  Game();
  virtual ~Game();

  Game(const Game& from);
  Game(Game&& from) noexcept
    : Game() {
    *this = ::std::move(from);
  }

  inline Game& operator=(const Game& from) {
    CopyFrom(from);
    return *this;
  }
  inline Game& operator=(Game&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Game& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Game* internal_default_instance() {
    return reinterpret_cast<const Game*>(
               &_Game_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Game& a, Game& b) {
    a.Swap(&b);
  }
  inline void Swap(Game* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Game* New() const final {
    return CreateMaybeMessage<Game>(nullptr);
  }

  Game* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Game>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Game& from);
  void MergeFrom(const Game& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Game* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pblczero.Game";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chunk_2eproto);
    return ::descriptor_table_chunk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Game_Result Result;
  static constexpr Result WHITE =
    Game_Result_WHITE;
  static constexpr Result BLACK =
    Game_Result_BLACK;
  static constexpr Result DRAW =
    Game_Result_DRAW;
  static inline bool Result_IsValid(int value) {
    return Game_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    Game_Result_Result_MIN;
  static constexpr Result Result_MAX =
    Game_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    Game_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return Game_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return Game_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(const std::string& name,
      Result* value) {
    return Game_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kPolicyFieldNumber = 2,
    kValueFieldNumber = 3,
    kMoveFieldNumber = 4,
    kResultFieldNumber = 5,
  };
  // repeated .pblczero.State state = 1;
  int state_size() const;
  private:
  int _internal_state_size() const;
  public:
  void clear_state();
  ::pblczero::State* mutable_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::State >*
      mutable_state();
  private:
  const ::pblczero::State& _internal_state(int index) const;
  ::pblczero::State* _internal_add_state();
  public:
  const ::pblczero::State& state(int index) const;
  ::pblczero::State* add_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::State >&
      state() const;

  // repeated .pblczero.Policy policy = 2;
  int policy_size() const;
  private:
  int _internal_policy_size() const;
  public:
  void clear_policy();
  ::pblczero::Policy* mutable_policy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::Policy >*
      mutable_policy();
  private:
  const ::pblczero::Policy& _internal_policy(int index) const;
  ::pblczero::Policy* _internal_add_policy();
  public:
  const ::pblczero::Policy& policy(int index) const;
  ::pblczero::Policy* add_policy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::Policy >&
      policy() const;

  // repeated float value = 3 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  float _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_value() const;
  void _internal_add_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_value();
  public:
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_value();

  // repeated uint32 move = 4 [packed = true];
  int move_size() const;
  private:
  int _internal_move_size() const;
  public:
  void clear_move();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_move(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_move() const;
  void _internal_add_move(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_move();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 move(int index) const;
  void set_move(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_move(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      move() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_move();

  // optional .pblczero.Game.Result result = 5;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::pblczero::Game_Result result() const;
  void set_result(::pblczero::Game_Result value);
  private:
  ::pblczero::Game_Result _internal_result() const;
  void _internal_set_result(::pblczero::Game_Result value);
  public:

  // @@protoc_insertion_point(class_scope:pblczero.Game)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::State > state_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::Policy > policy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > move_;
  mutable std::atomic<int> _move_cached_byte_size_;
  int result_;
  friend struct ::TableStruct_chunk_2eproto;
};
// -------------------------------------------------------------------

class Chunk :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pblczero.Chunk) */ {
 public:
  Chunk();
  virtual ~Chunk();

  Chunk(const Chunk& from);
  Chunk(Chunk&& from) noexcept
    : Chunk() {
    *this = ::std::move(from);
  }

  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chunk& operator=(Chunk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chunk* internal_default_instance() {
    return reinterpret_cast<const Chunk*>(
               &_Chunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Chunk& a, Chunk& b) {
    a.Swap(&b);
  }
  inline void Swap(Chunk* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chunk* New() const final {
    return CreateMaybeMessage<Chunk>(nullptr);
  }

  Chunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chunk& from);
  void MergeFrom(const Chunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pblczero.Chunk";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chunk_2eproto);
    return ::descriptor_table_chunk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameFieldNumber = 4,
    kLicenseFieldNumber = 2,
    kVersionFieldNumber = 3,
    kMagicFieldNumber = 1,
  };
  // repeated .pblczero.Game game = 4;
  int game_size() const;
  private:
  int _internal_game_size() const;
  public:
  void clear_game();
  ::pblczero::Game* mutable_game(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::Game >*
      mutable_game();
  private:
  const ::pblczero::Game& _internal_game(int index) const;
  ::pblczero::Game* _internal_add_game();
  public:
  const ::pblczero::Game& game(int index) const;
  ::pblczero::Game* add_game();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::Game >&
      game() const;

  // optional string license = 2;
  bool has_license() const;
  private:
  bool _internal_has_license() const;
  public:
  void clear_license();
  const std::string& license() const;
  void set_license(const std::string& value);
  void set_license(std::string&& value);
  void set_license(const char* value);
  void set_license(const char* value, size_t size);
  std::string* mutable_license();
  std::string* release_license();
  void set_allocated_license(std::string* license);
  private:
  const std::string& _internal_license() const;
  void _internal_set_license(const std::string& value);
  std::string* _internal_mutable_license();
  public:

  // optional .pblczero.EngineVersion version = 3;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::pblczero::EngineVersion& version() const;
  ::pblczero::EngineVersion* release_version();
  ::pblczero::EngineVersion* mutable_version();
  void set_allocated_version(::pblczero::EngineVersion* version);
  private:
  const ::pblczero::EngineVersion& _internal_version() const;
  ::pblczero::EngineVersion* _internal_mutable_version();
  public:

  // optional fixed32 magic = 1;
  bool has_magic() const;
  private:
  bool _internal_has_magic() const;
  public:
  void clear_magic();
  ::PROTOBUF_NAMESPACE_ID::uint32 magic() const;
  void set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_magic() const;
  void _internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pblczero.Chunk)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::Game > game_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr license_;
  ::pblczero::EngineVersion* version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 magic_;
  friend struct ::TableStruct_chunk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// State

// repeated fixed64 plane = 1 [packed = true];
inline int State::_internal_plane_size() const {
  return plane_.size();
}
inline int State::plane_size() const {
  return _internal_plane_size();
}
inline void State::clear_plane() {
  plane_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 State::_internal_plane(int index) const {
  return plane_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 State::plane(int index) const {
  // @@protoc_insertion_point(field_get:pblczero.State.plane)
  return _internal_plane(index);
}
inline void State::set_plane(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  plane_.Set(index, value);
  // @@protoc_insertion_point(field_set:pblczero.State.plane)
}
inline void State::_internal_add_plane(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  plane_.Add(value);
}
inline void State::add_plane(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_plane(value);
  // @@protoc_insertion_point(field_add:pblczero.State.plane)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
State::_internal_plane() const {
  return plane_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
State::plane() const {
  // @@protoc_insertion_point(field_list:pblczero.State.plane)
  return _internal_plane();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
State::_internal_mutable_plane() {
  return &plane_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
State::mutable_plane() {
  // @@protoc_insertion_point(field_mutable_list:pblczero.State.plane)
  return _internal_mutable_plane();
}

// optional uint32 us_ooo = 2;
inline bool State::_internal_has_us_ooo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool State::has_us_ooo() const {
  return _internal_has_us_ooo();
}
inline void State::clear_us_ooo() {
  us_ooo_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::_internal_us_ooo() const {
  return us_ooo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::us_ooo() const {
  // @@protoc_insertion_point(field_get:pblczero.State.us_ooo)
  return _internal_us_ooo();
}
inline void State::_internal_set_us_ooo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  us_ooo_ = value;
}
inline void State::set_us_ooo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_us_ooo(value);
  // @@protoc_insertion_point(field_set:pblczero.State.us_ooo)
}

// optional uint32 us_oo = 3;
inline bool State::_internal_has_us_oo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool State::has_us_oo() const {
  return _internal_has_us_oo();
}
inline void State::clear_us_oo() {
  us_oo_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::_internal_us_oo() const {
  return us_oo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::us_oo() const {
  // @@protoc_insertion_point(field_get:pblczero.State.us_oo)
  return _internal_us_oo();
}
inline void State::_internal_set_us_oo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  us_oo_ = value;
}
inline void State::set_us_oo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_us_oo(value);
  // @@protoc_insertion_point(field_set:pblczero.State.us_oo)
}

// optional uint32 them_ooo = 4;
inline bool State::_internal_has_them_ooo() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool State::has_them_ooo() const {
  return _internal_has_them_ooo();
}
inline void State::clear_them_ooo() {
  them_ooo_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::_internal_them_ooo() const {
  return them_ooo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::them_ooo() const {
  // @@protoc_insertion_point(field_get:pblczero.State.them_ooo)
  return _internal_them_ooo();
}
inline void State::_internal_set_them_ooo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  them_ooo_ = value;
}
inline void State::set_them_ooo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_them_ooo(value);
  // @@protoc_insertion_point(field_set:pblczero.State.them_ooo)
}

// optional uint32 them_oo = 5;
inline bool State::_internal_has_them_oo() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool State::has_them_oo() const {
  return _internal_has_them_oo();
}
inline void State::clear_them_oo() {
  them_oo_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::_internal_them_oo() const {
  return them_oo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::them_oo() const {
  // @@protoc_insertion_point(field_get:pblczero.State.them_oo)
  return _internal_them_oo();
}
inline void State::_internal_set_them_oo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  them_oo_ = value;
}
inline void State::set_them_oo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_them_oo(value);
  // @@protoc_insertion_point(field_set:pblczero.State.them_oo)
}

// optional uint32 side_to_move = 6;
inline bool State::_internal_has_side_to_move() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool State::has_side_to_move() const {
  return _internal_has_side_to_move();
}
inline void State::clear_side_to_move() {
  side_to_move_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::_internal_side_to_move() const {
  return side_to_move_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::side_to_move() const {
  // @@protoc_insertion_point(field_get:pblczero.State.side_to_move)
  return _internal_side_to_move();
}
inline void State::_internal_set_side_to_move(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  side_to_move_ = value;
}
inline void State::set_side_to_move(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_side_to_move(value);
  // @@protoc_insertion_point(field_set:pblczero.State.side_to_move)
}

// optional uint32 rule_50 = 7;
inline bool State::_internal_has_rule_50() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool State::has_rule_50() const {
  return _internal_has_rule_50();
}
inline void State::clear_rule_50() {
  rule_50_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::_internal_rule_50() const {
  return rule_50_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::rule_50() const {
  // @@protoc_insertion_point(field_get:pblczero.State.rule_50)
  return _internal_rule_50();
}
inline void State::_internal_set_rule_50(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  rule_50_ = value;
}
inline void State::set_rule_50(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rule_50(value);
  // @@protoc_insertion_point(field_set:pblczero.State.rule_50)
}

// -------------------------------------------------------------------

// Policy

// repeated uint32 index = 1 [packed = true];
inline int Policy::_internal_index_size() const {
  return index_.size();
}
inline int Policy::index_size() const {
  return _internal_index_size();
}
inline void Policy::clear_index() {
  index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Policy::_internal_index(int index) const {
  return index_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Policy::index(int index) const {
  // @@protoc_insertion_point(field_get:pblczero.Policy.index)
  return _internal_index(index);
}
inline void Policy::set_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  index_.Set(index, value);
  // @@protoc_insertion_point(field_set:pblczero.Policy.index)
}
inline void Policy::_internal_add_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  index_.Add(value);
}
inline void Policy::add_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_index(value);
  // @@protoc_insertion_point(field_add:pblczero.Policy.index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Policy::_internal_index() const {
  return index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Policy::index() const {
  // @@protoc_insertion_point(field_list:pblczero.Policy.index)
  return _internal_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Policy::_internal_mutable_index() {
  return &index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Policy::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:pblczero.Policy.index)
  return _internal_mutable_index();
}

// repeated float prior = 2 [packed = true];
inline int Policy::_internal_prior_size() const {
  return prior_.size();
}
inline int Policy::prior_size() const {
  return _internal_prior_size();
}
inline void Policy::clear_prior() {
  prior_.Clear();
}
inline float Policy::_internal_prior(int index) const {
  return prior_.Get(index);
}
inline float Policy::prior(int index) const {
  // @@protoc_insertion_point(field_get:pblczero.Policy.prior)
  return _internal_prior(index);
}
inline void Policy::set_prior(int index, float value) {
  prior_.Set(index, value);
  // @@protoc_insertion_point(field_set:pblczero.Policy.prior)
}
inline void Policy::_internal_add_prior(float value) {
  prior_.Add(value);
}
inline void Policy::add_prior(float value) {
  _internal_add_prior(value);
  // @@protoc_insertion_point(field_add:pblczero.Policy.prior)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Policy::_internal_prior() const {
  return prior_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Policy::prior() const {
  // @@protoc_insertion_point(field_list:pblczero.Policy.prior)
  return _internal_prior();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Policy::_internal_mutable_prior() {
  return &prior_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Policy::mutable_prior() {
  // @@protoc_insertion_point(field_mutable_list:pblczero.Policy.prior)
  return _internal_mutable_prior();
}

// -------------------------------------------------------------------

// Game

// repeated .pblczero.State state = 1;
inline int Game::_internal_state_size() const {
  return state_.size();
}
inline int Game::state_size() const {
  return _internal_state_size();
}
inline void Game::clear_state() {
  state_.Clear();
}
inline ::pblczero::State* Game::mutable_state(int index) {
  // @@protoc_insertion_point(field_mutable:pblczero.Game.state)
  return state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::State >*
Game::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:pblczero.Game.state)
  return &state_;
}
inline const ::pblczero::State& Game::_internal_state(int index) const {
  return state_.Get(index);
}
inline const ::pblczero::State& Game::state(int index) const {
  // @@protoc_insertion_point(field_get:pblczero.Game.state)
  return _internal_state(index);
}
inline ::pblczero::State* Game::_internal_add_state() {
  return state_.Add();
}
inline ::pblczero::State* Game::add_state() {
  // @@protoc_insertion_point(field_add:pblczero.Game.state)
  return _internal_add_state();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::State >&
Game::state() const {
  // @@protoc_insertion_point(field_list:pblczero.Game.state)
  return state_;
}

// repeated .pblczero.Policy policy = 2;
inline int Game::_internal_policy_size() const {
  return policy_.size();
}
inline int Game::policy_size() const {
  return _internal_policy_size();
}
inline void Game::clear_policy() {
  policy_.Clear();
}
inline ::pblczero::Policy* Game::mutable_policy(int index) {
  // @@protoc_insertion_point(field_mutable:pblczero.Game.policy)
  return policy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::Policy >*
Game::mutable_policy() {
  // @@protoc_insertion_point(field_mutable_list:pblczero.Game.policy)
  return &policy_;
}
inline const ::pblczero::Policy& Game::_internal_policy(int index) const {
  return policy_.Get(index);
}
inline const ::pblczero::Policy& Game::policy(int index) const {
  // @@protoc_insertion_point(field_get:pblczero.Game.policy)
  return _internal_policy(index);
}
inline ::pblczero::Policy* Game::_internal_add_policy() {
  return policy_.Add();
}
inline ::pblczero::Policy* Game::add_policy() {
  // @@protoc_insertion_point(field_add:pblczero.Game.policy)
  return _internal_add_policy();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::Policy >&
Game::policy() const {
  // @@protoc_insertion_point(field_list:pblczero.Game.policy)
  return policy_;
}

// repeated float value = 3 [packed = true];
inline int Game::_internal_value_size() const {
  return value_.size();
}
inline int Game::value_size() const {
  return _internal_value_size();
}
inline void Game::clear_value() {
  value_.Clear();
}
inline float Game::_internal_value(int index) const {
  return value_.Get(index);
}
inline float Game::value(int index) const {
  // @@protoc_insertion_point(field_get:pblczero.Game.value)
  return _internal_value(index);
}
inline void Game::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:pblczero.Game.value)
}
inline void Game::_internal_add_value(float value) {
  value_.Add(value);
}
inline void Game::add_value(float value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:pblczero.Game.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Game::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Game::value() const {
  // @@protoc_insertion_point(field_list:pblczero.Game.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Game::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Game::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:pblczero.Game.value)
  return _internal_mutable_value();
}

// repeated uint32 move = 4 [packed = true];
inline int Game::_internal_move_size() const {
  return move_.size();
}
inline int Game::move_size() const {
  return _internal_move_size();
}
inline void Game::clear_move() {
  move_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Game::_internal_move(int index) const {
  return move_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Game::move(int index) const {
  // @@protoc_insertion_point(field_get:pblczero.Game.move)
  return _internal_move(index);
}
inline void Game::set_move(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  move_.Set(index, value);
  // @@protoc_insertion_point(field_set:pblczero.Game.move)
}
inline void Game::_internal_add_move(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  move_.Add(value);
}
inline void Game::add_move(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_move(value);
  // @@protoc_insertion_point(field_add:pblczero.Game.move)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Game::_internal_move() const {
  return move_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Game::move() const {
  // @@protoc_insertion_point(field_list:pblczero.Game.move)
  return _internal_move();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Game::_internal_mutable_move() {
  return &move_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Game::mutable_move() {
  // @@protoc_insertion_point(field_mutable_list:pblczero.Game.move)
  return _internal_mutable_move();
}

// optional .pblczero.Game.Result result = 5;
inline bool Game::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Game::has_result() const {
  return _internal_has_result();
}
inline void Game::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pblczero::Game_Result Game::_internal_result() const {
  return static_cast< ::pblczero::Game_Result >(result_);
}
inline ::pblczero::Game_Result Game::result() const {
  // @@protoc_insertion_point(field_get:pblczero.Game.result)
  return _internal_result();
}
inline void Game::_internal_set_result(::pblczero::Game_Result value) {
  assert(::pblczero::Game_Result_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void Game::set_result(::pblczero::Game_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pblczero.Game.result)
}

// -------------------------------------------------------------------

// Chunk

// optional fixed32 magic = 1;
inline bool Chunk::_internal_has_magic() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Chunk::has_magic() const {
  return _internal_has_magic();
}
inline void Chunk::clear_magic() {
  magic_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Chunk::_internal_magic() const {
  return magic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Chunk::magic() const {
  // @@protoc_insertion_point(field_get:pblczero.Chunk.magic)
  return _internal_magic();
}
inline void Chunk::_internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  magic_ = value;
}
inline void Chunk::set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:pblczero.Chunk.magic)
}

// optional string license = 2;
inline bool Chunk::_internal_has_license() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Chunk::has_license() const {
  return _internal_has_license();
}
inline void Chunk::clear_license() {
  license_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Chunk::license() const {
  // @@protoc_insertion_point(field_get:pblczero.Chunk.license)
  return _internal_license();
}
inline void Chunk::set_license(const std::string& value) {
  _internal_set_license(value);
  // @@protoc_insertion_point(field_set:pblczero.Chunk.license)
}
inline std::string* Chunk::mutable_license() {
  // @@protoc_insertion_point(field_mutable:pblczero.Chunk.license)
  return _internal_mutable_license();
}
inline const std::string& Chunk::_internal_license() const {
  return license_.GetNoArena();
}
inline void Chunk::_internal_set_license(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  license_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Chunk::set_license(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  license_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pblczero.Chunk.license)
}
inline void Chunk::set_license(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  license_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pblczero.Chunk.license)
}
inline void Chunk::set_license(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  license_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pblczero.Chunk.license)
}
inline std::string* Chunk::_internal_mutable_license() {
  _has_bits_[0] |= 0x00000001u;
  return license_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chunk::release_license() {
  // @@protoc_insertion_point(field_release:pblczero.Chunk.license)
  if (!has_license()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return license_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chunk::set_allocated_license(std::string* license) {
  if (license != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  license_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), license);
  // @@protoc_insertion_point(field_set_allocated:pblczero.Chunk.license)
}

// optional .pblczero.EngineVersion version = 3;
inline bool Chunk::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || version_ != nullptr);
  return value;
}
inline bool Chunk::has_version() const {
  return _internal_has_version();
}
inline const ::pblczero::EngineVersion& Chunk::_internal_version() const {
  const ::pblczero::EngineVersion* p = version_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pblczero::EngineVersion*>(
      &::pblczero::_EngineVersion_default_instance_);
}
inline const ::pblczero::EngineVersion& Chunk::version() const {
  // @@protoc_insertion_point(field_get:pblczero.Chunk.version)
  return _internal_version();
}
inline ::pblczero::EngineVersion* Chunk::release_version() {
  // @@protoc_insertion_point(field_release:pblczero.Chunk.version)
  _has_bits_[0] &= ~0x00000002u;
  ::pblczero::EngineVersion* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::pblczero::EngineVersion* Chunk::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::pblczero::EngineVersion>(GetArenaNoVirtual());
    version_ = p;
  }
  return version_;
}
inline ::pblczero::EngineVersion* Chunk::mutable_version() {
  // @@protoc_insertion_point(field_mutable:pblczero.Chunk.version)
  return _internal_mutable_version();
}
inline void Chunk::set_allocated_version(::pblczero::EngineVersion* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:pblczero.Chunk.version)
}

// repeated .pblczero.Game game = 4;
inline int Chunk::_internal_game_size() const {
  return game_.size();
}
inline int Chunk::game_size() const {
  return _internal_game_size();
}
inline void Chunk::clear_game() {
  game_.Clear();
}
inline ::pblczero::Game* Chunk::mutable_game(int index) {
  // @@protoc_insertion_point(field_mutable:pblczero.Chunk.game)
  return game_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::Game >*
Chunk::mutable_game() {
  // @@protoc_insertion_point(field_mutable_list:pblczero.Chunk.game)
  return &game_;
}
inline const ::pblczero::Game& Chunk::_internal_game(int index) const {
  return game_.Get(index);
}
inline const ::pblczero::Game& Chunk::game(int index) const {
  // @@protoc_insertion_point(field_get:pblczero.Chunk.game)
  return _internal_game(index);
}
inline ::pblczero::Game* Chunk::_internal_add_game() {
  return game_.Add();
}
inline ::pblczero::Game* Chunk::add_game() {
  // @@protoc_insertion_point(field_add:pblczero.Chunk.game)
  return _internal_add_game();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pblczero::Game >&
Chunk::game() const {
  // @@protoc_insertion_point(field_list:pblczero.Chunk.game)
  return game_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pblczero

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pblczero::Game_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pblczero::Game_Result>() {
  return ::pblczero::Game_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chunk_2eproto
